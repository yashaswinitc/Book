
var config = TelemetryAgent.config.replace(/&quot;/g, '"');
//var queryLog = jQuery.parseJSON(my_json_str);
var config = jQuery.parseJSON(config);

if(typeof TelemetryAgentProblems !== 'undefined'){
    problems = TelemetryAgentProblems.getInstance(config);
}
var Fingerprint = function() {
                var self = this;
                self.getScreenResolution = function() {
                    var resolution;
                    resolution = (screen.height > screen.width) ? [screen.height, screen.width] : [screen.width, screen.height];

                    return resolution;
                }
                self.hasLocalStorage = function() {
                    try {
                        return !!window.localStorage;
                    } catch (e) {
                        return true; // SecurityError when referencing it means it exists
                    }
                }
                var nativeForEach, nativeMap;
                nativeForEach = Array.prototype.forEach;
                nativeMap = Array.prototype.map;

                self.each = function(obj, iterator, context) {
                    if (obj === null) {
                        return;
                    }
                    if (nativeForEach && obj.forEach === nativeForEach) {
                        obj.forEach(iterator, context);
                    } else if (obj.length === +obj.length) {
                        for (var i = 0, l = obj.length; i < l; i++) {
                            if (iterator.call(context, obj[i], i, obj) === {}) return;
                        }
                    } else {
                        for (var key in obj) {
                            if (obj.hasOwnProperty(key)) {
                                if (iterator.call(context, obj[key], key, obj) === {}) return;
                            }
                        }
                    }
                }
                self.hasSessionStorage = function() {
                    try {
                        return !!window.sessionStorage;
                    } catch (e) {
                        return true; // SecurityError when referencing it means it exists
                    }
                }
                self.getPluginsString = function() {
                    return self.map(navigator.plugins, function(p) {
                        var mimeTypes = self.map(p, function(mt) {
                            return [mt.type, mt.suffixes].join('~');
                        }).join(',');
                        return [p.name, p.description, mimeTypes].join('::');
                    }, self).join(';');
                }
                self.map = function(obj, iterator, context) {
                    var results = [];
                    // Not using strict equality so that this acts as a
                    // shortcut to checking for `null` and `undefined`.
                    if (obj == null) return results;
                    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
                    self.each(obj, function(value, index, list) {
                        results[results.length] = iterator.call(context, value, index, list);
                    });
                    return results;
                };
                self.isCanvasSupported = function() {
                    var elem = document.createElement('canvas');
                    return !!(elem.getContext && elem.getContext('2d'));
                }
                self.getCanvasFingerprint = function() {
                    var canvas = document.createElement('canvas');
                    var ctx = canvas.getContext('2d');
                    var txt = 'https://wt.opsfol.io';
                    ctx.textBaseline = 'top';
                    ctx.font = '14px Arial';
                    ctx.textBaseline = 'alphabetic';
                    ctx.fillStyle = '#f60';
                    ctx.fillRect(125, 1, 62, 20);
                    ctx.fillStyle = '#069';
                    ctx.fillText(txt, 2, 15);
                    ctx.fillStyle = 'rgba(102, 204, 0, 0.7)';
                    ctx.fillText(txt, 4, 17);
                    return canvas.toDataURL();
                }
                self.murmurhash3_32_gc = function(key, seed) {
                        var remainder, bytes, h1, h1b, c1, c2, k1, i;

                        remainder = key.length & 3; // key.length % 4
                        bytes = key.length - remainder;
                        h1 = seed;
                        c1 = 0xcc9e2d51;
                        c2 = 0x1b873593;
                        i = 0;

                        while (i < bytes) {
                            k1 =
                                ((key.charCodeAt(i) & 0xff)) |
                                ((key.charCodeAt(++i) & 0xff) << 8) |
                                ((key.charCodeAt(++i) & 0xff) << 16) |
                                ((key.charCodeAt(++i) & 0xff) << 24);
                            ++i;

                            k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
                            k1 = (k1 << 15) | (k1 >>> 17);
                            k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

                            h1 ^= k1;
                            h1 = (h1 << 13) | (h1 >>> 19);
                            h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
                            h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
                        }

                        k1 = 0;

                        switch (remainder) {
                            case 3:
                                k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
                            case 2:
                                k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
                            case 1:
                                k1 ^= (key.charCodeAt(i) & 0xff);

                                k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
                                k1 = (k1 << 15) | (k1 >>> 17);
                                k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
                                h1 ^= k1;
                        }

                        h1 ^= key.length;

                        h1 ^= h1 >>> 16;
                        h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
                        h1 ^= h1 >>> 13;
                        h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
                        h1 ^= h1 >>> 16;

                        return h1 >>> 0;
                    }
                    // Fingerprinting
                self.getClientId = function() {
                    var keys = [];
                    keys.push(navigator.userAgent);
                    keys.push(navigator.language);
                    keys.push(screen.colorDepth);
                    var resolution = self.getScreenResolution();
                    if (typeof resolution !== 'undefined') { // headless browsers, such as phantomjs
                        keys.push(resolution.join('x'));
                    }
                    keys.push(new Date().getTimezoneOffset());
                    keys.push(self.hasSessionStorage());
                    keys.push(self.hasLocalStorage());
                    keys.push(!!window.indexedDB);
                    //body might not be defined at this point or removed programmatically
                    if (document.body) {
                        keys.push(typeof(document.body.addBehavior));
                    } else {
                        keys.push(typeof undefined);
                    }
                    keys.push(typeof(window.openDatabase));
                    keys.push(navigator.cpuClass);
                    keys.push(navigator.platform);
                    keys.push(navigator.doNotTrack);
                    keys.push(self.getPluginsString());
                    if (self.isCanvasSupported()) {
                        keys.push(self.getCanvasFingerprint());
                    }
                    return self.murmurhash3_32_gc(keys.join('###'), 31);
                }
                self.setCookie = function (c_name, value, exdays) {
    var exdate = new Date();
    exdate.setDate(exdate.getDate() + exdays);
    var c_value = escape(value) + ((exdays == null) ? '' : '; expires=' + exdate.toUTCString());
    document.cookie = c_name + '=' + c_value;
}
            }
            function readCookie(name) {
                 var nameEQ = name + '=';
                 var ca = document.cookie.split(';');
                 for (var i = 0; i < ca.length; i++) {
                     var c = ca[i];
                     while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                     if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
                 }
                 return null;
             }
            var clientId = readCookie('telemetryAgentClientId');
            if (!clientId) {
                var FingerprintObject = new Fingerprint;
                clientId = FingerprintObject.getClientId();
                if (clientId) {
                	FingerprintObject.setCookie('telemetryAgentClientId', clientId, 1);
                };
            }
if(typeof TelemetryAgentPageData !== 'undefined'){
    pageData = TelemetryAgentPageData.getInstance(config);
    if(config.sendConfigSettings){
		var configSettingsValue  = {
			"problems" : config.problems,
			"pageData" : config.pageData,
			"supportWidget" : config.supportWidget,
			
		}
       
	    pageData.sendConfigData(configSettingsValue,config.settings.configSettingsActivityType);
	}
	
	if(document.cookie.indexOf(config.register.apiKey+'visited') == -1){
		 pageData.vistiedOn(true);
	}
}
// To send Google Analytics
if (config.googleAnalytics.enable) {
    function TelemetryAgentGoogleAnalytics() {
        var self = this;
        self.trackingId = config.googleAnalytics.trackingId;
        (function(i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r;
            i[r] = i[r] || function() {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date();
            a = s.createElement(o),
                m = s.getElementsByTagName(o)[0];
            a.async = 1;
            a.src = g;
            m.parentNode.insertBefore(a, m)
        })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
        ga('create', self.trackingId, 'auto');
 ga('set', 'checkProtocolTask', function(){});
        self.postPageview = function() {
            ga('send', 'pageview');
        }
    }
    var telemetryGa = new TelemetryAgentGoogleAnalytics();
    window.addEventListener("load", telemetryGa.postPageview, false);
}


// nps & support Widget 
if (typeof TelemetryAgentSupportWidget != 'undefined') {
    supportWidget = TelemetryAgentSupportWidget.getInstance(config);
  
    if(config.supportWidget.enable){
    	if(self==top) {
  	 		supportWidget.init();
    	}
    	 	
    }
   
}
